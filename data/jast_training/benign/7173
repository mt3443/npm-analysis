var gulp = require('gulp');
var merge = require('merge-stream');
var gulpIgnore = require('gulp-ignore');
var runSequence = require('run-sequence');
var inquirer = require('inquirer');
var jeditor = require('gulp-json-editor');
var replace = require('gulp-replace');

/**
 * Copy general files from loopback template
 */
gulp.task('loopback-copyGeneralFiles', function() {
  return gulp.src(__dirname + '/templates/loopback/**/*')
  .pipe(gulpIgnore.exclude(__dirname + '/templates/loopback/package.json'))
  .pipe(gulp.dest('./'));
});

/**
 * Copy hidden files from loopback tempalte
 */
gulp.task('loopback-copyHiddenFiles', function(done) {
  return gulp.src(__dirname + '/templates/loopback/**/.*')
  .pipe(gulpIgnore.exclude(__dirname + '/templates/loopback/package.json'))
  .pipe(gulp.dest('./'));
});

/**
 * Ask for required info to patch package.json and sonar-project.properties
 */
gulp.task('patch-loopback-files', function(done) {
  inquirer.prompt([
    {type: 'input', name: 'packageKey', message: 'Enter package ken: ', default: 'sample-app'},
    {type: 'input', name: 'packageName', message: 'Enter package name: ', default: 'Sample App'},
    {type: 'input', name: 'packageVersion', message: 'Enter version number: ', default: '0.1.0'},
    {type: 'input', name: 'authorName', message: 'Enter author name: ', default: ''},
    {type: 'input', name: 'authorEmail', message: 'Enter author email: ', default: ''},
    {type: 'input', name: 'license', message: 'Enter license info: ', default: 'SEE LICENSE IN LICENSE.md'},
    {type: 'input', name: 'srcRootDir', message: 'Enter relative path of source root directory: ', default: '.'},
    {type: 'input', name: 'unitTestRootDir', message: 'Enter relative path of unit test root directory: ', default: 'tests/unit-tests'},
    {type: 'confirm', name: 'continue', message: 'Continue? '}
  ])
  .then(function(answers){
    if(!answers.continue) {
      return done();
    }

    var task1 = gulp.src(__dirname + '/templates/loopback/package.json')
    .pipe(jeditor({
      name: answers.packageKey,
      version: answers.packageVersion,
      author: {
        name: answers.authorName,
        email: answers.authorEmail
      },
      license: answers.license
    }))
    .pipe(gulp.dest('./'))

    var task2 = gulp.src(__dirname + '/templates/loopback/sonar-project.properties')
    .pipe(replace('{{packageKey}}', answers.packageKey))
    .pipe(replace('{{packageName}}', answers.packageName))
    .pipe(replace('{{packageVersion}}', answers.packageVersion))
    .pipe(replace('{{srcRootDir}}', answers.srcRootDir))
    .pipe(replace('{{unitTestRootDir}}', answers.unitTestRootDir))
    .pipe(gulp.dest('./'))

    return merge(task1, task2)
    .on('end', function(){
      done();
    })
    .resume();
  });

});

/**
 * Ask for required info to patch package.json and sonar-project.properties
 */
gulp.task('patch-redux-react-files', function(done) {
  inquirer.prompt([
    {type: 'input', name: 'packageKey', message: 'Enter package ken: ', default: 'sample-app'},
    {type: 'input', name: 'packageName', message: 'Enter package name: ', default: 'Sample App'},
    {type: 'input', name: 'packageVersion', message: 'Enter version number: ', default: '0.1.0'},
    {type: 'input', name: 'authorName', message: 'Enter author name: ', default: ''},
    {type: 'input', name: 'authorEmail', message: 'Enter author email: ', default: ''},
    {type: 'input', name: 'license', message: 'Enter license info: ', default: 'SEE LICENSE IN LICENSE.md'},
    {type: 'input', name: 'srcRootDir', message: 'Enter relative path of source root directory: ', default: '.'},
    {type: 'input', name: 'unitTestRootDir', message: 'Enter relative path of unit test root directory: ', default: 'tests/unit-tests'},
    {type: 'confirm', name: 'continue', message: 'Continue? '}
  ])
  .then(function(answers){
    if(!answers.continue) {
      return done();
    }

    var task1 = gulp.src(__dirname + '/templates/redux-react/package.json')
    .pipe(jeditor({
      name: answers.packageKey,
      version: answers.packageVersion,
      author: {
        name: answers.authorName,
        email: answers.authorEmail
      },
      license: answers.license
    }))
    .pipe(gulp.dest('./'))

    var task2 = gulp.src(__dirname + '/templates/redux-react/sonar-project.properties')
    .pipe(replace('{{packageKey}}', answers.packageKey))
    .pipe(replace('{{packageName}}', answers.packageName))
    .pipe(replace('{{packageVersion}}', answers.packageVersion))
    .pipe(replace('{{srcRootDir}}', answers.srcRootDir))
    .pipe(replace('{{unitTestRootDir}}', answers.unitTestRootDir))
    .pipe(gulp.dest('./'))

    return merge(task1, task2)
    .on('end', function(){
      done();
    })
    .resume();
  });

});

/**
 * Copy general files from redux-react template 
 */
gulp.task('redux-react-copyGeneralFiles', function() {
  return gulp.src(__dirname + '/templates/redux-react/**/*')
  .pipe(gulp.dest('./'));
});

/**
 * Copy hidden files from redux-react template 
 */
gulp.task('redux-react-copyHiddenFiles', function() {
  return gulp.src(__dirname + '/templates/redux-react/**/.*')
  .pipe(gulp.dest('./'));
});

/**
 * Copy redux-react templates
 */
gulp.task('redux-react', function(done){
  runSequence('redux-react-copyGeneralFiles', 'redux-react-copyHiddenFiles', done);
});

/**
 * Update existing package.json with grommet devDependencies
 */
gulp.task('grommet-addDevDependencies', function() {
  return gulp.src('./package.json')
  .pipe(jeditor({
    "devDependencies": {
      "grommet": "^1.7.0"
    }
  }))
  .pipe(gulp.dest('./'));
});

/**
 * Copy general files from grommet-app template 
 */
gulp.task('grommet-copyGeneralFiles', function() {
  return gulp.src(__dirname + '/templates/grommet-addon/src/**/*')
  .pipe(gulp.dest('./src', {overwrite: true}));
});

/**
 * Add Grommet add-on files
 */
gulp.task('grommet-addon', function(done){
  runSequence('grommet-addDevDependencies', 'grommet-copyGeneralFiles', 'patch-redux-react-files', done);
});

/**
 * Grommet app
 */
gulp.task('grommet-app', function(done){
  runSequence('redux-react', 'grommet-addon', done)
})

/**
 * Grommet app
 */
gulp.task('react-app', function(done){
  runSequence('redux-react', 'patch-redux-react-files', done)
})

/**
 * loopback
 */
gulp.task('loopback', function(done){
  runSequence('loopback-copyGeneralFiles', 'loopback-copyHiddenFiles', 'patch-files', done);
});

/**
 * Default task
 */
gulp.task('default',['loopback'], function() {
  
})
