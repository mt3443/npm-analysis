// Generated by CoffeeScript 1.12.7
(function() {
  var ACTIONID_POSITION, ACTION_REGEXP, MAIN_TOPIC, QOS, RESPONSE_REGEXP, RESPONSE_SUBTOPIC, debug, randomstring;

  randomstring = require('randomstring');

  debug = (require('debug'))("device-mqtt:api_commands");

  QOS = 2;

  MAIN_TOPIC = 'commands';

  RESPONSE_SUBTOPIC = 'response';

  ACTIONID_POSITION = 2;

  RESPONSE_REGEXP = new RegExp("^" + MAIN_TOPIC + "\/(.)+\/([a-zA-Z0-9])+\/" + RESPONSE_SUBTOPIC);

  ACTION_REGEXP = new RegExp("^" + MAIN_TOPIC + "\/(.)+\/([a-zA-Z0-9])+");

  module.exports = function(arg) {
    var _actionResultCallbacks, _extractActionId, _generatePubTopic, _generateReplyObject, _generateResponse, _generateResponseTopic, _handleIncomingActions, _handleIncomingResults, _mqtt, _socket, handleMessage, mqttInstance, send, socket, socketId;
    mqttInstance = arg.mqttInstance, socket = arg.socket, socketId = arg.socketId;
    if (!mqttInstance) {
      throw new Error('No mqtt connection provided!');
    }
    if (!socketId) {
      throw new Error('ClientId must be provided!');
    }
    _socket = socket;
    _mqtt = mqttInstance;
    _actionResultCallbacks = {};
    send = function(message, resultCb, mqttCb) {
      var action, actionId, actionMessage, dest, payload, responseTopic, topic;
      action = message.action, dest = message.dest, payload = message.payload;
      debug("Sending action " + action + " to " + dest + " with payload: " + payload);
      if (!action) {
        throw new Error('No action provided!');
      }
      if (!dest) {
        throw new Error('No dest provided!');
      }
      if (typeof message.action !== 'string') {
        throw new Error('Action must be a string');
      }
      if (typeof message.dest !== 'string') {
        throw new Error('Dest must be a string');
      }
      actionMessage = JSON.stringify({
        action: action,
        payload: payload,
        origin: socketId
      });
      debug("Sending new message: " + actionMessage);
      actionId = randomstring.generate();
      topic = _generatePubTopic(actionId, message.dest);

      /*
      			Is it important to sub to the response topic before sending the action,
      			because there can be a race condition and the sender will never receives
      			the response.
       */
      responseTopic = _generateResponseTopic(actionId, socketId);
      return _mqtt.sub(responseTopic, {
        qos: QOS
      }, function(error, granted) {
        if (error) {
          return _socket.emit('error', error);
        }
        _actionResultCallbacks[actionId] = resultCb;
        return _mqtt.pub(topic, actionMessage, {
          qos: QOS
        }, function(error) {
          if (error) {
            _mqtt.unsubscribe(responseTopic, function(unsubscribeError) {
              if (unsubscribeError) {
                return _socket.emit('error', unsubscribeError);
              }
              return _socket.emit('error', error);
            });
          }
          return typeof mqttCb === "function" ? mqttCb(null, 'OK') : void 0;
        });
      });
    };
    handleMessage = function(topic, message, type) {
      debug("Received message. Topic: " + (topic.toString()) + ", payload: " + message + ", type: " + type);
      if (type === 'result') {
        return _handleIncomingResults(topic, message);
      }
      if (type === 'action') {
        return _handleIncomingActions(topic, message);
      }
    };
    _handleIncomingActions = function(topic, message) {
      var action, actionId, origin, payload, ref, reply;
      debug("Received new action. Topic: " + topic + " and message: " + message + "\n");
      ref = JSON.parse(message), action = ref.action, payload = ref.payload, origin = ref.origin;
      actionId = _extractActionId(topic);
      reply = _generateReplyObject(origin, actionId, action);
      _socket.emit("action", action, payload, reply);
      return _socket.emit("action:" + action, payload, reply);
    };
    _handleIncomingResults = function(topic, message) {
      var action, actionId, data, ref, statusCode;
      debug("Received new result. Topic: " + topic + " and message: " + message + "\n");
      ref = JSON.parse(message), action = ref.action, statusCode = ref.statusCode, data = ref.data;
      actionId = _extractActionId(topic);
      return _mqtt.unsubscribe(topic, function(error) {
        if (error) {
          return _socket.emit('error', error);
        }
        if (_actionResultCallbacks[actionId]) {
          if (statusCode === 'OK') {
            _actionResultCallbacks[actionId](null, {
              data: data
            });
          } else {
            _actionResultCallbacks[actionId]({
              data: data
            });
          }
          delete _actionResultCallbacks[actionId];
        } else {

        }
        if (statusCode === 'OK') {
          return _socket.emit('response', null, {
            action: action,
            data: data
          });
        } else {
          return _socket.emit('response', {
            action: action,
            data: data
          });
        }
      });
    };
    _extractActionId = function(topic) {
      var actionId;
      topic = topic.toString();
      actionId = (topic.split('/'))[ACTIONID_POSITION];
      return actionId;
    };
    _generateReplyObject = function(origin, actionId, action) {
      var reply;
      reply = {};
      reply.send = function(arg1, cb) {
        var data, responseMessage, type;
        type = arg1.type, data = arg1.data;
        responseMessage = _generateResponse({
          type: type,
          data: data,
          action: action
        });
        return _mqtt.pub(_generateResponseTopic(actionId, origin), responseMessage, {
          qos: QOS
        }, function(error) {
          if (error) {
            return typeof cb === "function" ? cb(error) : void 0;
          }
          return _mqtt.unsubscribe(_generatePubTopic(actionId, socketId), function(error) {
            if (error) {
              return typeof cb === "function" ? cb(error) : void 0;
            }
            return typeof cb === "function" ? cb(null, 'OK') : void 0;
          });
        });
      };
      return reply;
    };
    _generateResponseTopic = function(actionId, origin) {
      var responseTopic;
      debug("Generating response topic with actionId " + actionId + " and origin " + origin);
      responseTopic = MAIN_TOPIC + "/" + origin + "/" + actionId + "/" + RESPONSE_SUBTOPIC;
      debug("Generated response topic: " + responseTopic);
      return responseTopic;
    };
    _generatePubTopic = function(actionId, dest) {
      return MAIN_TOPIC + "/" + dest + "/" + actionId;
    };
    _generateResponse = function(arg1) {
      var action, data, ref, responseType, type;
      type = arg1.type, data = (ref = arg1.data) != null ? ref : {}, action = arg1.action;
      if (!data) {
        throw new Error('No data provided!');
      }
      responseType = function(data) {
        return {
          success: JSON.stringify({
            statusCode: 'OK',
            data: data,
            action: action
          }),
          error: JSON.stringify({
            statusCode: 'ERROR',
            data: data,
            action: action
          })
        };
      };
      return responseType(data)[type];
    };
    return {
      send: send,
      handleMessage: handleMessage,
      responseRegex: RESPONSE_REGEXP,
      actionRegex: ACTION_REGEXP
    };
  };

}).call(this);
